{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport keyboardKey from 'keyboard-key';\nimport isNumber from 'lodash/isNumber';\nimport isNil from 'lodash/isNil';\nimport includes from 'lodash/includes';\nimport React from 'react';\n/** Do not expose this class. Instead use RangeSelectionPicker and SingleSelectionPicker. */\n\nvar BasePicker =\n/** @class */\nfunction (_super) {\n  __extends(BasePicker, _super);\n\n  function BasePicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onHoveredCellPositionChange = function (e, _a) {\n      var itemPosition = _a.itemPosition;\n\n      _this.setState({\n        hoveredCellPosition: itemPosition\n      });\n    };\n\n    _this.canCalendarCatchKeyboardEvents = function () {\n      if (_this.props.inline) {\n        return _this.props.isPickerInFocus();\n      }\n\n      return _this.props.isTriggerInFocus();\n    };\n\n    _this.handleKeyPress = function (event) {\n      if (!_this.canCalendarCatchKeyboardEvents()) {\n        return;\n      }\n\n      var key = keyboardKey.getKey(event);\n\n      switch (key) {\n        case 'Enter':\n          _this.handleEnterKeyPress(event);\n\n          break;\n\n        case 'Escape':\n          _this.props.closePopup();\n\n          break;\n\n        default:\n          _this.handleArrowKeyPress(event);\n\n      }\n    };\n\n    _this.handleEnterKeyPress = function (event) {\n      var key = keyboardKey.getKey(event);\n\n      if (key === 'Enter' && _this.canCalendarCatchKeyboardEvents()) {\n        event.preventDefault();\n\n        var selectedValue = _this.buildCalendarValues()[_this.state.hoveredCellPosition];\n\n        _this.handleChange(null, {\n          value: selectedValue,\n          itemPosition: _this.state.hoveredCellPosition\n        });\n      }\n    };\n\n    _this.handleBlur = function () {\n      _this.props.closePopup();\n    };\n\n    _this.handleArrowKeyPress = function (event) {\n      if (!_this.canCalendarCatchKeyboardEvents()) {\n        return;\n      }\n\n      var key = keyboardKey.getKey(event);\n\n      var selectableCells = _this.getSelectableCellPositions();\n\n      var nextSelectableCellPositionLeft = selectableCells.slice(0, selectableCells.indexOf(_this.state.hoveredCellPosition)).pop();\n      var nextSelectableCellPositionRight = selectableCells.slice(selectableCells.indexOf(_this.state.hoveredCellPosition) + 1)[0];\n\n      switch (key) {\n        case 'ArrowLeft':\n          event.preventDefault();\n\n          if (!isNil(nextSelectableCellPositionLeft)) {\n            _this.onHoveredCellPositionChange(null, {\n              itemPosition: nextSelectableCellPositionLeft\n            });\n          } else {\n            if (_this.isPrevPageAvailable()) {\n              _this.switchToPrevPage(null, null, function () {\n                var selectableCellsPrevPage = _this.getSelectableCellPositions();\n\n                _this.onHoveredCellPositionChange(null, {\n                  itemPosition: selectableCellsPrevPage[selectableCellsPrevPage.length - 1]\n                });\n              });\n            }\n          }\n\n          break;\n\n        case 'ArrowRight':\n          event.preventDefault();\n\n          if (!isNil(nextSelectableCellPositionRight)) {\n            _this.onHoveredCellPositionChange(null, {\n              itemPosition: nextSelectableCellPositionRight\n            });\n          } else {\n            if (_this.isNextPageAvailable()) {\n              _this.switchToNextPage(null, null, function () {\n                var selectableCellsNextPage = _this.getSelectableCellPositions();\n\n                _this.onHoveredCellPositionChange(null, {\n                  itemPosition: selectableCellsNextPage[0]\n                });\n              });\n            }\n          }\n\n          break;\n\n        case 'ArrowUp':\n          event.preventDefault();\n\n          if (includes(selectableCells, _this.state.hoveredCellPosition - _this.PAGE_WIDTH)) {\n            _this.onHoveredCellPositionChange(null, {\n              itemPosition: _this.state.hoveredCellPosition - _this.PAGE_WIDTH\n            });\n          }\n\n          break;\n\n        case 'ArrowDown':\n          event.preventDefault();\n\n          if (includes(selectableCells, _this.state.hoveredCellPosition + _this.PAGE_WIDTH)) {\n            _this.onHoveredCellPositionChange(null, {\n              itemPosition: _this.state.hoveredCellPosition + _this.PAGE_WIDTH\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.state = {\n      hoveredCellPosition: undefined,\n      date: _this.props.initializeWith.clone()\n    };\n    return _this;\n  }\n\n  BasePicker.prototype.componentDidMount = function () {\n    document.addEventListener('keydown', this.handleKeyPress);\n  };\n\n  BasePicker.prototype.componentWillUnmount = function () {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  };\n\n  return BasePicker;\n}(React.Component);\n\nvar RangeSelectionPicker =\n/** @class */\nfunction (_super) {\n  __extends(RangeSelectionPicker, _super);\n\n  function RangeSelectionPicker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RangeSelectionPicker.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    var _a = this.getActiveCellsPositions(),\n        start = _a.start,\n        end = _a.end;\n\n    var hoveredPos;\n\n    if (end) {\n      hoveredPos = end;\n    } else if (start) {\n      hoveredPos = start;\n    } else {\n      hoveredPos = this.getInitialDatePosition();\n    }\n\n    this.setState({\n      hoveredCellPosition: hoveredPos\n    });\n  };\n\n  return RangeSelectionPicker;\n}(BasePicker);\n\nexport { RangeSelectionPicker };\n\nvar SingleSelectionPicker =\n/** @class */\nfunction (_super) {\n  __extends(SingleSelectionPicker, _super);\n\n  function SingleSelectionPicker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SingleSelectionPicker.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    var active = this.getActiveCellPosition();\n    this.setState({\n      hoveredCellPosition: isNumber(active) ? active : this.getInitialDatePosition()\n    });\n  };\n\n  return SingleSelectionPicker;\n}(BasePicker);\n\nexport { SingleSelectionPicker };","map":null,"metadata":{},"sourceType":"module"}