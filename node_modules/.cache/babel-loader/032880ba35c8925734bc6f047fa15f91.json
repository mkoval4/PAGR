{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { default as moment } from 'moment';\nimport * as React from 'react';\n\nvar BaseInput =\n/** @class */\nfunction (_super) {\n  __extends(BaseInput, _super);\n\n  function BaseInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.closePopup = function () {\n      _this.setState({\n        popupIsClosed: true\n      });\n    };\n\n    _this.openPopup = function () {\n      _this.setState({\n        popupIsClosed: false\n      });\n    };\n\n    _this.isPickerInFocus = function () {\n      return document.activeElement === _this.calendarNode;\n    };\n\n    _this.isTriggerInFocus = function () {\n      return document.activeElement === _this.inputNode;\n    };\n\n    _this.onModeSwitch = function () {\n      // when using keyboard for selecting values on inline calendar\n      // and when mode switches, picker looses focus.\n      // In order to preserve focus on active picker\n      // we call focus() on `calendarNode`.\n      // `calendarNode` goes from *View component via\n      // `this.onCalendarViewMount` callback\n      if (_this.props.inline && !_this.isPickerInFocus() && _this.calendarNode) {\n        _this.calendarNode.focus();\n      }\n    };\n\n    _this.onCalendarViewMount = function (calendarNode) {\n      _this.calendarNode = calendarNode;\n    };\n\n    _this.onInputViewMount = function (inputNode) {\n      _this.inputNode = inputNode;\n    };\n\n    return _this;\n  }\n\n  BaseInput.defaultProps = {\n    inline: false,\n    localization: moment.locale()\n  };\n  return BaseInput;\n}(React.Component);\n\nexport default BaseInput;","map":null,"metadata":{},"sourceType":"module"}