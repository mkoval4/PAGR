{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\components\\\\tasks\\\\EditTaskModal.js\";\nimport React, { useState } from 'react';\nimport { Grid, Input, Modal, Form, Label, TextArea, Button, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport WithDoctors from \"../../containers/data/WithDoctors\";\n\nvar EditTaskModal = function EditTaskModal(_ref) {\n  var onCloseClicked = _ref.onCloseClicked,\n      updateTask = _ref.updateTask,\n      task = _ref.task,\n      doctors = _ref.doctors;\n  var name = task.name,\n      description = task.description,\n      dueDate = task.dueDate,\n      priority = task.priority,\n      doctor = task.doctor,\n      assignedDate = task.assignedDate;\n\n  var _useState = useState(name),\n      _useState2 = _slicedToArray(_useState, 2),\n      updatedName = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(description),\n      _useState4 = _slicedToArray(_useState3, 2),\n      updatedDescription = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(moment(dueDate).format('YYYY-MM-DD')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      updatedDueDate = _useState6[0],\n      setDueDate = _useState6[1];\n\n  var _useState7 = useState(priority || 1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      updatedPriority = _useState8[0],\n      setPriority = _useState8[1];\n\n  var _useState9 = useState(doctor),\n      _useState10 = _slicedToArray(_useState9, 2),\n      updatedDoctor = _useState10[0],\n      setDoctor = _useState10[1];\n\n  var canSave = updatedName.length > 0 && updatedDescription.length > 0 && updatedDueDate.length > 0;\n  return React.createElement(Modal, {\n    open: true,\n    centered: true,\n    onClose: onCloseClicked,\n    closeOnDimmerClick: false,\n    closeIcon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Edit Task\"), React.createElement(Modal.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    columns: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"Task\",\n    labelPosition: \"left\",\n    type: \"text\",\n    onChange: function onChange(e, _ref2) {\n      var value = _ref2.value;\n      return setName(value);\n    },\n    value: updatedName,\n    required: true,\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"Due Date\",\n    labelPosition: \"left\",\n    type: \"date\",\n    onChange: function onChange(e, _ref3) {\n      var value = _ref3.value;\n      return setDueDate(value);\n    },\n    value: updatedDueDate,\n    required: true,\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Description\"), React.createElement(TextArea, {\n    onChange: function onChange(e, _ref4) {\n      var value = _ref4.value;\n      return setDescription(value);\n    },\n    value: updatedDescription,\n    required: true,\n    rows: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Form.Select, {\n    label: \"Request for Assistance\",\n    labelPosition: \"left\",\n    fluid: true,\n    onChange: function onChange(e, _ref5) {\n      var value = _ref5.value;\n      return setDoctor(value);\n    },\n    value: updatedDoctor,\n    options: doctors.map(function (_ref6) {\n      var id = _ref6.id,\n          name = _ref6.name;\n      return {\n        text: name,\n        value: name,\n        key: id\n      };\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Form.Select, {\n    label: \"Priority\",\n    labelPosition: \"left\",\n    fluid: true,\n    onChange: function onChange(e, _ref7) {\n      var value = _ref7.value;\n      return setPriority(parseInt(value));\n    },\n    value: updatedPriority,\n    options: [{\n      text: 'High',\n      value: 1,\n      key: 1\n    }, {\n      text: 'Medium',\n      value: 2,\n      key: 2\n    }, {\n      text: 'Low',\n      value: 3,\n      key: 2\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))))))), React.createElement(Modal.Actions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: !canSave,\n    primary: true,\n    onClick: function onClick() {\n      updateTask(_objectSpread({}, task, {\n        name: updatedName,\n        description: updatedDescription,\n        dueDate: updatedDueDate,\n        priority: updatedPriority,\n        doctor: updatedDoctor,\n        assignedDate: doctor === updatedDoctor ? assignedDate : new Date()\n      }));\n      onCloseClicked();\n    },\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"save outline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), \"Save\")));\n};\n\nexport default WithDoctors(EditTaskModal);","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\components\\tasks\\EditTaskModal.js"],"names":["React","useState","Grid","Input","Modal","Form","Label","TextArea","Button","Icon","moment","WithDoctors","EditTaskModal","onCloseClicked","updateTask","task","doctors","name","description","dueDate","priority","doctor","assignedDate","updatedName","setName","updatedDescription","setDescription","format","updatedDueDate","setDueDate","updatedPriority","setPriority","updatedDoctor","setDoctor","canSave","length","e","value","map","id","text","key","parseInt","Date"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {Grid, Input, Modal, Form, Label, TextArea, Button, Icon} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport WithDoctors from \"../../containers/data/WithDoctors\";\r\n\r\nconst EditTaskModal = ({onCloseClicked, updateTask, task, doctors}) => {\r\n    const {name, description, dueDate, priority, doctor, assignedDate} = task;\r\n    const [updatedName, setName] = useState(name);\r\n    const [updatedDescription, setDescription] = useState(description);\r\n    const [updatedDueDate, setDueDate] = useState(moment(dueDate).format('YYYY-MM-DD'));\r\n    const [updatedPriority, setPriority] = useState(priority || 1);\r\n    const [updatedDoctor, setDoctor] = useState(doctor);\r\n    const canSave = updatedName.length > 0 && updatedDescription.length > 0 && updatedDueDate.length > 0\r\n\r\n    return (\r\n        <Modal\r\n            open\r\n            centered\r\n            onClose={onCloseClicked}\r\n            closeOnDimmerClick={false}\r\n            closeIcon\r\n        >\r\n            <Modal.Header>\r\n                Edit Task\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Form>\r\n                    <Grid>\r\n                        <Grid.Row columns={3}>\r\n                            <Grid.Column>\r\n                                <Form.Field>\r\n                                    <Input label='Task' labelPosition='left' type='text' onChange={(e, {value}) => setName(value)} value={updatedName} required fluid />\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <Input label='Due Date' labelPosition='left'  type='date' onChange={(e, {value}) => setDueDate(value)} value={updatedDueDate} required fluid />\r\n                                </Form.Field>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <Form.Field>\r\n                                    <Label>Description</Label>\r\n                                    <TextArea onChange={(e, {value}) => setDescription(value)} value={updatedDescription} required rows={4} />\r\n                                </Form.Field>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <Form.Field>\r\n                                    <Form.Select\r\n                                        label='Request for Assistance'\r\n                                        labelPosition='left'\r\n                                        fluid\r\n                                        onChange={(e, {value}) => setDoctor(value)}\r\n                                        value={updatedDoctor}\r\n                                        options={doctors.map(({id, name}) => ({text: name, value: name, key: id}))}\r\n                                    >\r\n                                    </Form.Select>\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <Form.Select\r\n                                        label='Priority'\r\n                                        labelPosition='left'\r\n                                        fluid\r\n                                        onChange={(e, {value}) => setPriority(parseInt(value))}\r\n                                        value={updatedPriority}\r\n                                        options={[\r\n                                            {text: 'High', value: 1, key: 1},\r\n                                            {text: 'Medium', value: 2, key: 2},\r\n                                            {text: 'Low', value: 3, key: 2},\r\n                                        ]}\r\n                                    >\r\n                                    </Form.Select>\r\n                                </Form.Field>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Form>\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <Button disabled={!canSave} primary onClick={() => {\r\n                    updateTask({\r\n                        ...task,\r\n                        name: updatedName,\r\n                        description: updatedDescription,\r\n                        dueDate: updatedDueDate,\r\n                        priority: updatedPriority,\r\n                        doctor: updatedDoctor,\r\n                        assignedDate: doctor === updatedDoctor ? assignedDate : new Date()\r\n                    });\r\n                    onCloseClicked();\r\n                }} size='large'>\r\n                    <Icon name='save outline'/>\r\n                    Save\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default WithDoctors(EditTaskModal);\r\n"]},"metadata":{},"sourceType":"module"}