{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\containers\\\\data\\\\WithPatients.js\";\nimport React from \"react\";\nimport faker from \"faker\";\nimport { random as randomHospital } from \"./WithHospitals\";\nvar loaded = false;\nvar patientList = [];\nvar nextPatientId = 0;\nvar localstorageKey = 'patient-data';\nvar dataVersion = 2;\n\nvar generate = function generate() {\n  var patient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  nextPatientId += 1;\n  return _objectSpread({\n    id: nextPatientId,\n    patientId: faker.random.number(),\n    name: faker.name.firstName() + ' ' + faker.name.lastName(),\n    email: faker.internet.email(),\n    hospital: randomHospital().name,\n    location: 'Room ' + faker.random.arrayElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) + faker.random.arrayElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) + faker.random.arrayElement(['A', 'B', 'C', 'D'])\n  }, patient);\n};\n\nvar seed = function seed() {\n  for (var i = 0; i < 30; i++) {\n    patientList.push(generate());\n  }\n};\n\nvar saveState = function saveState() {\n  localStorage.setItem(localstorageKey, JSON.stringify({\n    dataVersion: dataVersion,\n    nextPatientId: nextPatientId,\n    patientList: patientList\n  }));\n};\n\nvar loadPatientData = function loadPatientData() {\n  if (loaded) {\n    return;\n  }\n\n  if (localStorage.getItem(localstorageKey)) {\n    var _JSON$parse = JSON.parse(localStorage.getItem(localstorageKey)),\n        lsDataVersion = _JSON$parse.dataVersion,\n        lsNextPatientId = _JSON$parse.nextPatientId,\n        lsPatientList = _JSON$parse.patientList;\n\n    if (dataVersion === lsDataVersion) {\n      loaded = true;\n      nextPatientId = lsNextPatientId;\n      patientList = lsPatientList;\n      return;\n    }\n  }\n\n  seed();\n  saveState();\n  loaded = true;\n};\n\nvar WithPatients = function WithPatients(WrappedComponent) {\n  loadPatientData();\n  return function (props) {\n    return React.createElement(WrappedComponent, Object.assign({}, props, {\n      patients: patientList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  };\n};\n\nexport var random = function random() {\n  loadPatientData();\n  return faker.random.arrayElement(patientList);\n};\nexport default WithPatients;","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\containers\\data\\WithPatients.js"],"names":["React","faker","random","randomHospital","loaded","patientList","nextPatientId","localstorageKey","dataVersion","generate","patient","id","patientId","number","name","firstName","lastName","email","internet","hospital","location","arrayElement","seed","i","push","saveState","localStorage","setItem","JSON","stringify","loadPatientData","getItem","parse","lsDataVersion","lsNextPatientId","lsPatientList","WithPatients","WrappedComponent","props"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport faker from \"faker\";\r\nimport {random as randomHospital} from \"./WithHospitals\";\r\n\r\nlet loaded = false;\r\nlet patientList = [];\r\nlet nextPatientId = 0;\r\n\r\nconst localstorageKey = 'patient-data';\r\n\r\nconst dataVersion = 2;\r\n\r\nconst generate = (patient = {}) => {\r\n    nextPatientId += 1;\r\n    return {\r\n        id: nextPatientId,\r\n        patientId: faker.random.number(),\r\n        name: faker.name.firstName() + ' ' + faker.name.lastName(),\r\n        email: faker.internet.email(),\r\n        hospital: randomHospital().name,\r\n        location: 'Room ' + faker.random.arrayElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])+ faker.random.arrayElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) + faker.random.arrayElement(['A', 'B', 'C', 'D']),\r\n        ...patient\r\n    };\r\n};\r\n\r\nconst seed = () => {\r\n    for (let i = 0; i < 30; i++) {\r\n        patientList.push(generate());\r\n    }\r\n};\r\n\r\nconst saveState = () => {\r\n    localStorage.setItem(localstorageKey, JSON.stringify({\r\n        dataVersion,\r\n        nextPatientId,\r\n        patientList\r\n    }))\r\n};\r\n\r\nconst loadPatientData = () => {\r\n    if (loaded) {\r\n        return;\r\n    }\r\n\r\n    if (localStorage.getItem(localstorageKey)) {\r\n        const {\r\n            dataVersion: lsDataVersion,\r\n            nextPatientId: lsNextPatientId,\r\n            patientList: lsPatientList\r\n        } = JSON.parse(localStorage.getItem(localstorageKey))\r\n\r\n        if (dataVersion === lsDataVersion) {\r\n            loaded = true;\r\n            nextPatientId = lsNextPatientId;\r\n            patientList = lsPatientList;\r\n            return;\r\n        }\r\n    }\r\n\r\n    seed();\r\n    saveState();\r\n    loaded = true;\r\n};\r\n\r\nconst WithPatients = (WrappedComponent) => {\r\n    loadPatientData();\r\n\r\n    return props => (\r\n        <WrappedComponent {...props} patients={patientList} />\r\n    )\r\n}\r\n\r\nexport const random = () => {\r\n    loadPatientData();\r\n\r\n    return faker.random.arrayElement(patientList);\r\n}\r\n\r\nexport default WithPatients;\r\n"]},"metadata":{},"sourceType":"module"}