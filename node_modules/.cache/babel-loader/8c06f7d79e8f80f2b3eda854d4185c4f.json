{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\containers\\\\Tasks.js\";\nimport React, { useState } from \"react\";\nimport { Button, Checkbox, Container, Dropdown, Icon, Menu } from \"semantic-ui-react\";\nimport AddTaskModal from \"../components/tasks/AddTaskModal\";\nimport WithTasks from \"./data/WithTasks\";\nimport TaskTable from \"../components/tasks/TaskTable\";\n\nvar tasks = function tasks(_ref) {\n  var addTask = _ref.addTask,\n      updateTask = _ref.updateTask,\n      todaysTasks = _ref.todaysTasks,\n      weeksTasks = _ref.weeksTasks,\n      monthsTasks = _ref.monthsTasks,\n      completedTasks = _ref.completedTasks,\n      sortFieldA = _ref.sortFieldA,\n      setSortFieldA = _ref.setSortFieldA,\n      sortFieldB = _ref.sortFieldB,\n      setSortFieldB = _ref.setSortFieldB,\n      includeCompleted = _ref.includeCompleted,\n      setIncludeCompleted = _ref.setIncludeCompleted;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      addModalOpen = _useState2[0],\n      setAddModalOpen = _useState2[1];\n\n  var sortOptions = [{\n    a: ['dueDate', true],\n    b: ['priority', true],\n    label: 'Priority (Descending)'\n  }, {\n    a: ['dueDate', true],\n    b: ['priority', false],\n    label: 'Priority (Ascending)'\n  }, {\n    a: ['dueDate', true],\n    b: ['dueDate', true],\n    label: 'Due date'\n  }, {\n    a: ['dueDate', true],\n    b: ['assignedDate', false],\n    label: 'Assigned date (Newest)'\n  }, {\n    a: ['dueDate', true],\n    b: ['assignedDate', true],\n    label: 'Assigned date (Oldest)'\n  }];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sortValue = _useState4[0],\n      setSortValue = _useState4[1];\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Menu, {\n    secondary: true,\n    style: {\n      zIndex: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Menu.Menu, {\n    position: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Menu.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: includeCompleted,\n    onChange: function onChange(e, _ref2) {\n      var checked = _ref2.checked;\n      setIncludeCompleted(!!checked);\n    },\n    label: \"Include Completed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(Menu.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    options: sortOptions.map(function (_ref3, idx) {\n      var label = _ref3.label;\n      return {\n        key: idx,\n        text: label,\n        value: idx\n      };\n    }),\n    onChange: function onChange(e, _ref4) {\n      var value = _ref4.value;\n      setSortValue(value);\n      var _sortOptions$value = sortOptions[value],\n          a = _sortOptions$value.a,\n          b = _sortOptions$value.b;\n      setSortFieldA(a);\n      setSortFieldB(b);\n    },\n    value: sortValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(Menu.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Button, {\n    primary: true,\n    onClick: function onClick() {\n      return setAddModalOpen(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"plus circle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), \" Add New Task\")))), addModalOpen && React.createElement(AddTaskModal, {\n    addTask: addTask,\n    onCloseClicked: function onCloseClicked() {\n      return setAddModalOpen(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(TaskTable, {\n    defaultOpen: true,\n    title: \"Todays Tasks\",\n    tasks: todaysTasks,\n    updateTask: updateTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(TaskTable, {\n    defaultOpen: false,\n    title: \"This Weeks Tasks\",\n    tasks: weeksTasks,\n    updateTask: updateTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(TaskTable, {\n    defaultOpen: false,\n    title: \"This Months Tasks\",\n    tasks: monthsTasks,\n    updateTask: updateTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(TaskTable, {\n    defaultOpen: false,\n    title: \"Completed Tasks\",\n    tasks: completedTasks,\n    updateTask: updateTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport default WithTasks(tasks, {\n  applyCustomSort: true\n});","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\containers\\Tasks.js"],"names":["React","useState","Button","Checkbox","Container","Dropdown","Icon","Menu","AddTaskModal","WithTasks","TaskTable","tasks","addTask","updateTask","todaysTasks","weeksTasks","monthsTasks","completedTasks","sortFieldA","setSortFieldA","sortFieldB","setSortFieldB","includeCompleted","setIncludeCompleted","addModalOpen","setAddModalOpen","sortOptions","a","b","label","sortValue","setSortValue","zIndex","e","checked","map","idx","key","text","value","applyCustomSort"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Checkbox, Container, Dropdown, Icon, Menu} from \"semantic-ui-react\";\r\nimport AddTaskModal from \"../components/tasks/AddTaskModal\";\r\nimport WithTasks from \"./data/WithTasks\";\r\nimport TaskTable from \"../components/tasks/TaskTable\";\r\n\r\nconst tasks = ({addTask, updateTask, todaysTasks, weeksTasks, monthsTasks, completedTasks, sortFieldA, setSortFieldA, sortFieldB, setSortFieldB, includeCompleted, setIncludeCompleted}) => {\r\n    const [addModalOpen, setAddModalOpen] = useState(false);\r\n\r\n    const sortOptions = [\r\n        {\r\n            a: ['dueDate', true],\r\n            b: ['priority', true],\r\n            label: 'Priority (Descending)'\r\n        },\r\n        {\r\n            a: ['dueDate', true],\r\n            b: ['priority', false],\r\n            label: 'Priority (Ascending)'\r\n        },\r\n        {\r\n            a: ['dueDate', true],\r\n            b: ['dueDate', true],\r\n            label: 'Due date'\r\n        },\r\n        {\r\n            a: ['dueDate', true],\r\n            b: ['assignedDate', false],\r\n            label: 'Assigned date (Newest)'\r\n        },\r\n        {\r\n            a: ['dueDate', true],\r\n            b: ['assignedDate', true],\r\n            label: 'Assigned date (Oldest)'\r\n        }\r\n    ];\r\n\r\n    const [sortValue, setSortValue] = useState(0);\r\n\r\n    return (\r\n        <Container>\r\n            <Menu secondary style={{zIndex: 10}}>\r\n                <Menu.Menu position='right'>\r\n                    <Menu.Item>\r\n                        <Checkbox\r\n                            checked={includeCompleted}\r\n                            onChange={(e, {checked}) => {setIncludeCompleted(!!checked)}}\r\n                            label=\"Include Completed\"\r\n                        />\r\n                    </Menu.Item>\r\n                    <Menu.Item>\r\n                        <Dropdown\r\n                            options={sortOptions.map(({label}, idx) => ({key: idx, text: label, value: idx}))}\r\n                            onChange={(e, {value}) => {\r\n                                setSortValue(value);\r\n                                const {a, b} = sortOptions[value];\r\n                                setSortFieldA(a);\r\n                                setSortFieldB(b);\r\n                            }}\r\n                            value={sortValue}\r\n                        >\r\n\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                    <Menu.Item>\r\n                        <Button primary onClick={() => setAddModalOpen(true)}><Icon name='plus circle'/> Add New Task</Button>\r\n                    </Menu.Item>\r\n                </Menu.Menu>\r\n            </Menu>\r\n            {addModalOpen && <AddTaskModal addTask={addTask} onCloseClicked={() => setAddModalOpen(false)} />}\r\n            <TaskTable defaultOpen={true} title={`Todays Tasks`} tasks={todaysTasks} updateTask={updateTask} />\r\n            <TaskTable defaultOpen={false} title={`This Weeks Tasks`} tasks={weeksTasks} updateTask={updateTask} />\r\n            <TaskTable defaultOpen={false} title={`This Months Tasks`} tasks={monthsTasks} updateTask={updateTask} />\r\n            <TaskTable defaultOpen={false} title={`Completed Tasks`} tasks={completedTasks} updateTask={updateTask} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WithTasks(tasks, {applyCustomSort: true});\r\n"]},"metadata":{},"sourceType":"module"}