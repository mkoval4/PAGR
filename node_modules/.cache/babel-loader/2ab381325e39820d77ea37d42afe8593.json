{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\components\\\\search\\\\index.js\";\nimport React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Header, Icon, Input, Modal, Table } from \"semantic-ui-react\";\nimport DatesRangeInput from \"semantic-ui-calendar-react/dist/es6/inputs/DatesRangeInput\";\nimport WithTasks from \"../../containers/data/WithTasks\";\nimport WithDoctors from \"../../containers/data/WithDoctors\";\nimport WithPatients from \"../../containers/data/WithPatients\";\nimport WithHospitals from \"../../containers/data/WithHospitals\";\nimport WithCategorys from \"../../containers/data/WithCategories\";\nimport moment from \"moment\";\n\nvar Search = function Search(_ref) {\n  var categories = _ref.categories,\n      hospitals = _ref.hospitals,\n      patients = _ref.patients,\n      doctors = _ref.doctors,\n      tasks = _ref.allTasks,\n      search = _ref.search,\n      onSearchUpdated = _ref.onSearchUpdated,\n      onClose = _ref.onClose;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateRange = _useState2[0],\n      setDateRange = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedCategories = _useState4[0],\n      setSelectedCategories = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedHospitals = _useState6[0],\n      setSelectedHospitals = _useState6[1];\n\n  var categoryOptions = categories.map(function (_ref2) {\n    var id = _ref2.id,\n        name = _ref2.name;\n    return {\n      key: id,\n      value: name,\n      text: name\n    };\n  });\n  var hospitalOptions = hospitals.map(function (_ref3) {\n    var id = _ref3.id,\n        name = _ref3.name;\n    return {\n      key: id,\n      value: name,\n      text: name\n    };\n  });\n  var matchedPatients = patients.filter(function (_ref4) {\n    var name = _ref4.name,\n        hospital = _ref4.hospital;\n\n    if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\n      return false;\n    }\n\n    if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\n      return false;\n    }\n\n    return true;\n  }).slice(0, 5);\n  var matchedDoctors = doctors.filter(function (_ref5) {\n    var name = _ref5.name,\n        hospital = _ref5.hospital;\n\n    if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\n      return false;\n    }\n\n    if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\n      return false;\n    }\n\n    return true;\n  }).slice(0, 5);\n  var dateRangeSplit = dateRange.split(' - ', 2);\n  var dateFrom = dateRangeSplit.length === 2 && dateRangeSplit[0].length > 0 ? moment(dateRangeSplit[0], 'DD-MM-YYYY') : false;\n  var dateTo = dateRangeSplit.length === 2 && dateRangeSplit[1].length > 0 ? moment(dateRangeSplit[1], 'DD-MM-YYYY') : false;\n  var matchedTasks = tasks.filter(function (_ref6) {\n    var name = _ref6.name,\n        hospital = _ref6.hospital,\n        category = _ref6.category,\n        dueDate = _ref6.dueDate;\n\n    if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\n      return false;\n    }\n\n    if (selectedCategories.length > 0 && !selectedCategories.includes(category)) {\n      return false;\n    }\n\n    if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\n      return false;\n    }\n\n    if (dateFrom !== false && dueDate < dateFrom) {\n      return false;\n    }\n\n    if (dateTo !== false && dueDate > dateTo) {\n      return false;\n    }\n\n    return true;\n  }).slice(0, 5);\n  return React.createElement(Modal, {\n    open: true,\n    centered: true,\n    size: \"large\",\n    onClose: onClose,\n    closeOnDimmerClick: false,\n    closeIcon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    fluid: true,\n    value: search,\n    onChange: function onChange(e, _ref7) {\n      var value = _ref7.value;\n      return onSearchUpdated(value);\n    },\n    icon: React.createElement(Icon, {\n      name: \"search\",\n      circular: true,\n      link: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(Modal.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    placeholder: \"All Categories\",\n    selection: true,\n    multiple: true,\n    search: true,\n    options: categoryOptions,\n    value: selectedCategories,\n    onChange: function onChange(e, _ref8) {\n      var value = _ref8.value;\n      return setSelectedCategories(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    placeholder: \"Search Hospitals\",\n    selection: true,\n    multiple: true,\n    search: true,\n    options: hospitalOptions,\n    value: selectedHospitals,\n    onChange: function onChange(e, _ref9) {\n      var value = _ref9.value;\n      return setSelectedHospitals(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(DatesRangeInput, {\n    name: \"dateRange\",\n    placeholder: \"Date Range\",\n    value: dateRange,\n    iconPosition: \"left\",\n    popupPosition: \"bottom center\",\n    clearable: true,\n    onChange: function onChange(e, _ref10) {\n      var value = _ref10.value;\n      return setDateRange(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(Button, {\n    onClick: function onClick() {\n      setSelectedHospitals([]);\n      setSelectedCategories([]);\n      setDateRange('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"remove circle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), \"Clear\")))), React.createElement(Modal.Content, {\n    scrolling: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, matchedDoctors.length === 0 && matchedPatients.length === 0 && React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"No Results Found - Try widening your search above?\")), matchedPatients.length > 0 && React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Patients\"), React.createElement(Table, {\n    basic: \"very\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Name\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Patient ID\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Email\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Hospital\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Location\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, matchedPatients.map(function (_ref11) {\n    var id = _ref11.id,\n        patientId = _ref11.patientId,\n        name = _ref11.name,\n        email = _ref11.email,\n        hospital = _ref11.hospital,\n        location = _ref11.location;\n    return React.createElement(Table.Row, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, name), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, patientId), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, email), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, hospital), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, location));\n  })))), matchedDoctors.length > 0 && React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Doctors\"), React.createElement(Table, {\n    basic: \"very\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Name\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Email\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Hospital\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Office\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, matchedDoctors.map(function (_ref12) {\n    var id = _ref12.id,\n        name = _ref12.name,\n        email = _ref12.email,\n        hospital = _ref12.hospital,\n        office = _ref12.office;\n    return React.createElement(Table.Row, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, name), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, email), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, hospital), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, office));\n  })))), matchedTasks.length > 0 && React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"Tasks\"), React.createElement(Table, {\n    basic: \"very\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Completed\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, \"Category\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Task\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Doctor\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"Due Date\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Hospital\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, matchedTasks.map(function (_ref13) {\n    var id = _ref13.id,\n        category = _ref13.category,\n        name = _ref13.name,\n        completed = _ref13.completed,\n        hospital = _ref13.hospital,\n        doctor = _ref13.doctor,\n        dueDate = _ref13.dueDate;\n    return React.createElement(Table.Row, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, completed ? 'Yes' : 'No'), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, category), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, name), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, doctor), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, moment(dueDate).format('LLL')), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, hospital));\n  }))))));\n};\n\nexport default WithCategorys(WithHospitals(WithPatients(WithDoctors(WithTasks(Search)))));","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\components\\search\\index.js"],"names":["React","useState","Button","Dropdown","Form","Header","Icon","Input","Modal","Table","DatesRangeInput","WithTasks","WithDoctors","WithPatients","WithHospitals","WithCategorys","moment","Search","categories","hospitals","patients","doctors","tasks","allTasks","search","onSearchUpdated","onClose","dateRange","setDateRange","selectedCategories","setSelectedCategories","selectedHospitals","setSelectedHospitals","categoryOptions","map","id","name","key","value","text","hospitalOptions","matchedPatients","filter","hospital","length","includes","toLowerCase","trim","slice","matchedDoctors","dateRangeSplit","split","dateFrom","dateTo","matchedTasks","category","dueDate","e","patientId","email","location","office","completed","doctor","format"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Dropdown, Form, Header, Icon, Input, Modal, Table} from \"semantic-ui-react\";\r\nimport DatesRangeInput from \"semantic-ui-calendar-react/dist/es6/inputs/DatesRangeInput\";\r\nimport WithTasks from \"../../containers/data/WithTasks\";\r\nimport WithDoctors from \"../../containers/data/WithDoctors\";\r\nimport WithPatients from \"../../containers/data/WithPatients\";\r\nimport WithHospitals from \"../../containers/data/WithHospitals\";\r\nimport WithCategorys from \"../../containers/data/WithCategories\";\r\nimport moment from \"moment\";\r\n\r\nconst Search = ({categories, hospitals, patients, doctors, allTasks: tasks, search, onSearchUpdated, onClose}) => {\r\n    const [dateRange, setDateRange] = useState('');\r\n    const [selectedCategories, setSelectedCategories] = useState([]);\r\n    const [selectedHospitals, setSelectedHospitals] = useState([]);\r\n\r\n    const categoryOptions = categories.map(({id, name}) =>({key: id, value: name, text: name}));\r\n    const hospitalOptions = hospitals.map(({id, name}) =>({key: id, value: name, text: name}));\r\n\r\n    const matchedPatients = patients\r\n        .filter(({name, hospital}) => {\r\n            if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\r\n                return false;\r\n            }\r\n\r\n            if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }).slice(0, 5);\r\n\r\n    const matchedDoctors = doctors\r\n        .filter(({name, hospital}) => {\r\n            if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\r\n                return false;\r\n            }\r\n\r\n            if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }).slice(0, 5);\r\n\r\n    const dateRangeSplit = dateRange.split(' - ', 2);\r\n    const dateFrom = dateRangeSplit.length === 2 && dateRangeSplit[0].length > 0\r\n        ? moment(dateRangeSplit[0], 'DD-MM-YYYY')\r\n        : false;\r\n    const dateTo = dateRangeSplit.length === 2 && dateRangeSplit[1].length > 0\r\n        ? moment(dateRangeSplit[1], 'DD-MM-YYYY')\r\n        : false;\r\n\r\n    const matchedTasks = tasks\r\n        .filter(({name, hospital, category, dueDate}) => {\r\n            if (selectedHospitals.length > 0 && !selectedHospitals.includes(hospital)) {\r\n                return false;\r\n            }\r\n\r\n            if (selectedCategories.length > 0 && !selectedCategories.includes(category)) {\r\n                return false;\r\n            }\r\n\r\n            if (search.length > 0 && !name.toLowerCase().includes(search.toLowerCase().trim())) {\r\n                return false;\r\n            }\r\n\r\n            if (dateFrom !== false && dueDate < dateFrom) {\r\n                return false;\r\n            }\r\n\r\n            if (dateTo !== false && dueDate > dateTo) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }).slice(0, 5);\r\n\r\n    return (\r\n        <Modal\r\n            open\r\n            centered\r\n            size='large'\r\n            onClose={onClose}\r\n            closeOnDimmerClick={false}\r\n            closeIcon\r\n        >\r\n            <Modal.Header>\r\n                <Input\r\n                    type='text'\r\n                    fluid\r\n                    value={search}\r\n                    onChange={(e, {value}) => onSearchUpdated(value)}\r\n                    icon={<Icon name='search' circular link />}\r\n                />\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Form>\r\n                    <Form.Group inline>\r\n                        <Form.Field>\r\n                            <Dropdown\r\n                                placeholder='All Categories'\r\n                                selection\r\n                                multiple\r\n                                search\r\n                                options={categoryOptions}\r\n                                value={selectedCategories}\r\n                                onChange={(e, {value}) => setSelectedCategories(value)}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <Dropdown\r\n                                placeholder='Search Hospitals'\r\n                                selection\r\n                                multiple\r\n                                search\r\n                                options={hospitalOptions}\r\n                                value={selectedHospitals}\r\n                                onChange={(e, {value}) => setSelectedHospitals(value)}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <DatesRangeInput\r\n                                name=\"dateRange\"\r\n                                placeholder=\"Date Range\"\r\n                                value={dateRange}\r\n                                iconPosition=\"left\"\r\n                                popupPosition=\"bottom center\"\r\n                                clearable\r\n                                onChange={(e, {value}) => setDateRange(value)}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Button onClick={() => {\r\n                            setSelectedHospitals([]);\r\n                            setSelectedCategories([]);\r\n                            setDateRange('');\r\n                        }}>\r\n                            <Icon name='remove circle'/>\r\n                            Clear\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Content scrolling>\r\n                {(matchedDoctors.length === 0 && matchedPatients.length === 0) && (\r\n                    <>\r\n                        <Header>No Results Found - Try widening your search above?</Header>\r\n                    </>\r\n                )}\r\n\r\n                {matchedPatients.length > 0 && (\r\n                    <>\r\n                        <Header>Patients</Header>\r\n                        <Table basic='very'>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Name</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Patient ID</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Email</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Hospital</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Location</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {matchedPatients.map(({id, patientId, name, email, hospital, location}) => (\r\n                                    <Table.Row key={id}>\r\n                                        <Table.Cell>{name}</Table.Cell>\r\n                                        <Table.Cell>{patientId}</Table.Cell>\r\n                                        <Table.Cell>{email}</Table.Cell>\r\n                                        <Table.Cell>{hospital}</Table.Cell>\r\n                                        <Table.Cell>{location}</Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </>\r\n                )}\r\n\r\n                {matchedDoctors.length > 0 && (\r\n                    <>\r\n                        <Header>Doctors</Header>\r\n                        <Table basic='very'>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Name</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Email</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Hospital</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Office</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {matchedDoctors.map(({id, name, email, hospital, office}) => (\r\n                                    <Table.Row key={id}>\r\n                                        <Table.Cell>{name}</Table.Cell>\r\n                                        <Table.Cell>{email}</Table.Cell>\r\n                                        <Table.Cell>{hospital}</Table.Cell>\r\n                                        <Table.Cell>{office}</Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </>\r\n                )}\r\n\r\n                {matchedTasks.length > 0 && (\r\n                    <>\r\n                        <Header>Tasks</Header>\r\n                        <Table basic='very'>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Completed</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Category</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Task</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Doctor</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Due Date</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Hospital</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {matchedTasks.map(({id, category, name, completed, hospital, doctor, dueDate}) => (\r\n                                    <Table.Row key={id}>\r\n                                        <Table.Cell>{completed ? 'Yes' : 'No'}</Table.Cell>\r\n                                        <Table.Cell>{category}</Table.Cell>\r\n                                        <Table.Cell>{name}</Table.Cell>\r\n                                        <Table.Cell>{doctor}</Table.Cell>\r\n                                        <Table.Cell>{moment(dueDate).format('LLL')}</Table.Cell>\r\n                                        <Table.Cell>{hospital}</Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </>\r\n                )}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default WithCategorys(WithHospitals(WithPatients(WithDoctors(WithTasks(Search)))));\r\n"]},"metadata":{},"sourceType":"module"}