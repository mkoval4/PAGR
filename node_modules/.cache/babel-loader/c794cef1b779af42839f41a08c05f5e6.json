{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\components\\\\tasks\\\\TaskTable.js\";\nimport React, { useState } from \"react\";\nimport { Button, Divider, Header, Icon, Table } from \"semantic-ui-react\";\nimport './TaskTable.scss';\nimport { CALENDAR_FORMAT } from \"../../constants\";\nimport EditTaskModal from \"./EditTaskModal\";\nimport moment from \"moment\";\nimport ViewTaskModal from \"./ViewTaskModal\";\n\nvar TaskTableRow = function TaskTableRow(_ref) {\n  var initialTask = _ref.task,\n      updateTask = _ref.updateTask;\n\n  var _useState = useState(initialTask),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var name = task.name,\n      doctor = task.doctor,\n      dueDate = task.dueDate,\n      priority = task.priority,\n      completed = task.completed,\n      assignedDate = task.assignedDate;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editOpen = _useState4[0],\n      setEditOpen = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      viewOpen = _useState6[0],\n      setViewOpen = _useState6[1];\n\n  var onUpdateTaskClicked = function onUpdateTaskClicked(updatedTask) {\n    updateTask(updatedTask);\n    setTask(updatedTask);\n  };\n\n  console.log(task);\n  return React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    style: {\n      cursor: 'pointer'\n    },\n    name: completed ? 'check square outline' : 'square outline',\n    size: \"large\",\n    onClick: function onClick() {\n      return onUpdateTaskClicked(_objectSpread({}, task, {\n        completed: !completed\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"square full\",\n    color: parseInt(priority) === 1 ? 'red' : priority === 2 ? 'yellow' : 'grey',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, name), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, doctor), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, moment(dueDate).format(CALENDAR_FORMAT)), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"assigned \", moment(assignedDate).fromNow()), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Button, {\n    secondary: true,\n    onClick: function onClick() {\n      return setViewOpen(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"magnify\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), \" View\"), React.createElement(Button, {\n    secondary: true,\n    onClick: function onClick() {\n      return setEditOpen(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), \" Edit\")), editOpen && React.createElement(EditTaskModal, {\n    onCloseClicked: function onCloseClicked() {\n      return setEditOpen(false);\n    },\n    task: task,\n    updateTask: onUpdateTaskClicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), viewOpen && React.createElement(ViewTaskModal, {\n    onCloseClicked: function onCloseClicked() {\n      return setViewOpen(false);\n    },\n    onEditClicked: function onEditClicked() {\n      setViewOpen(false);\n      setEditOpen(true);\n    },\n    task: task,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n};\n\nexport default (function (_ref2) {\n  var tasks = _ref2.tasks,\n      title = _ref2.title,\n      defaultOpen = _ref2.defaultOpen,\n      updateTask = _ref2.updateTask;\n\n  var _useState7 = useState(defaultOpen),\n      _useState8 = _slicedToArray(_useState7, 2),\n      open = _useState8[0],\n      setOpen = _useState8[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"angle down\",\n    rotated: open ? undefined : \"counterclockwise\",\n    onClick: function onClick() {\n      return setOpen(!open);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), \" \", \"\".concat(title, \" (\").concat(tasks.length, \" tasks)\")), open && React.createElement(Table, {\n    basic: \"very\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, tasks.map(function (t) {\n    return React.createElement(TaskTableRow, {\n      key: t.id,\n      task: t,\n      updateTask: updateTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\components\\tasks\\TaskTable.js"],"names":["React","useState","Button","Divider","Header","Icon","Table","CALENDAR_FORMAT","EditTaskModal","moment","ViewTaskModal","TaskTableRow","initialTask","task","updateTask","setTask","name","doctor","dueDate","priority","completed","assignedDate","editOpen","setEditOpen","viewOpen","setViewOpen","onUpdateTaskClicked","updatedTask","console","log","cursor","parseInt","format","fromNow","tasks","title","defaultOpen","open","setOpen","undefined","length","map","t","id"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Divider, Header, Icon, Table} from \"semantic-ui-react\";\r\nimport './TaskTable.scss';\r\nimport {CALENDAR_FORMAT} from \"../../constants\";\r\nimport EditTaskModal from \"./EditTaskModal\";\r\nimport moment from \"moment\";\r\nimport ViewTaskModal from \"./ViewTaskModal\";\r\n\r\nconst TaskTableRow = ({task: initialTask, updateTask}) => {\r\n    const [task, setTask] = useState(initialTask);\r\n    const {name, doctor, dueDate, priority, completed, assignedDate} = task;\r\n    const [editOpen, setEditOpen] = useState(false);\r\n    const [viewOpen, setViewOpen] = useState(false);\r\n\r\n    const onUpdateTaskClicked = (updatedTask) => {\r\n        updateTask(updatedTask);\r\n        setTask(updatedTask);\r\n    };\r\n\r\n    console.log(task);\r\n\r\n    return (\r\n        <Table.Row>\r\n            <Table.Cell>\r\n                <Icon style={{cursor: 'pointer'}} name={completed ? 'check square outline' : 'square outline'} size='large' onClick={() => onUpdateTaskClicked({...task, completed: !completed})} />\r\n            </Table.Cell>\r\n            <Table.Cell><Icon name='square full' color={parseInt(priority) === 1 ? 'red' : (priority === 2 ? 'yellow' : 'grey')} /></Table.Cell>\r\n            <Table.Cell>{name}</Table.Cell>\r\n            <Table.Cell>{doctor}</Table.Cell>\r\n            <Table.Cell>{moment(dueDate).format(CALENDAR_FORMAT)}</Table.Cell>\r\n            <Table.Cell>assigned {moment(assignedDate).fromNow()}</Table.Cell>\r\n            <Table.Cell>\r\n                <Button secondary onClick={() => setViewOpen(true)}><Icon name='magnify' /> View</Button>\r\n                <Button secondary onClick={() => setEditOpen(true)}><Icon name='edit' /> Edit</Button>\r\n            </Table.Cell>\r\n            {editOpen && <EditTaskModal onCloseClicked={() => setEditOpen(false)} task={task} updateTask={onUpdateTaskClicked} />}\r\n            {viewOpen && <ViewTaskModal onCloseClicked={() => setViewOpen(false)} onEditClicked={() => {\r\n                setViewOpen(false);\r\n                setEditOpen(true);\r\n            }} task={task} />}\r\n        </Table.Row>\r\n    );\r\n}\r\n\r\nexport default ({tasks, title, defaultOpen, updateTask}) => {\r\n    const [open, setOpen] = useState(defaultOpen)\r\n\r\n    return (\r\n        <div>\r\n            <Header as='h2'>\r\n                <Icon name='angle down' rotated={open ? undefined : \"counterclockwise\"} onClick={() => setOpen(!open)} /> {`${title} (${tasks.length} tasks)`}\r\n            </Header>\r\n            {open && (\r\n                <Table basic='very'>\r\n                    <Table.Body>\r\n                        {tasks.map(t => (\r\n                            <TaskTableRow key={t.id} task={t} updateTask={updateTask} />\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            )}\r\n            <Divider />\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}