{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmaks\\\\Desktop\\\\project\\\\hci-pagr.github.io\\\\src\\\\containers\\\\data\\\\WithTasks.js\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport faker from \"faker\";\nimport { random as randomDoctor } from \"./WithDoctors\";\nimport { random as randomCategory } from \"./WithCategories\";\nimport { random as randomHospital } from \"./WithHospitals\";\nvar loaded = false;\nvar taskList = [];\nvar nextTaskId = 0;\nvar localstorageKey = 'task-data';\nvar dataVersion = 1;\nvar datesFrom = new Date();\ndatesFrom.setDate(datesFrom.getDate() - 7);\nvar datesTo = new Date();\ndatesTo.setDate(datesTo.getDate() + 30);\n\nvar generate = function generate() {\n  var task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  nextTaskId += 1;\n  return _objectSpread({\n    id: nextTaskId,\n    name: faker.random.arrayElement(['Tonsillectomy', 'Prostatectomy', 'Mastectomy', 'Inguinal hernia repairs', 'Free skin graft', 'Debridement of wound', 'Coronary artery bypass', 'Breast biopsy', 'Coronary angioplasty and stenting', 'Balloon valve surgery', 'Valve replacement', 'Pacemaker Fitting', 'Partial colectomy', 'Small-bowel resection', 'Gall bladder removal', 'Operation for peptic ulcer disease', 'Removal of abdominal adhesions', 'Appendectomy', 'Laparotomy']),\n    category: randomCategory().name,\n    hospital: randomHospital().name,\n    description: faker.random.words(),\n    dueDate: faker.date.between(datesFrom, datesTo),\n    assignedDate: faker.date.past(),\n    priority: faker.random.arrayElement([1, 1, 2, 2, 2, 3, 3]),\n    completed: false,\n    doctor: randomDoctor().name\n  }, task);\n};\n\nvar seed = function seed() {\n  for (var i = 0; i < 50; i++) {\n    taskList.push(generate());\n  }\n};\n\nvar saveState = function saveState() {\n  localStorage.setItem(localstorageKey, JSON.stringify({\n    dataVersion: dataVersion,\n    nextTaskId: nextTaskId,\n    taskList: taskList\n  }));\n};\n\nvar loadTaskData = function loadTaskData() {\n  if (loaded) {\n    return;\n  }\n\n  if (localStorage.getItem(localstorageKey)) {\n    var _JSON$parse = JSON.parse(localStorage.getItem(localstorageKey)),\n        lsDataVersion = _JSON$parse.dataVersion,\n        lsNextTaskId = _JSON$parse.nextTaskId,\n        lsTaskList = _JSON$parse.taskList;\n\n    if (dataVersion === lsDataVersion) {\n      loaded = true;\n      nextTaskId = lsNextTaskId;\n      taskList = lsTaskList;\n      return;\n    }\n  }\n\n  seed();\n  saveState();\n  loaded = true;\n};\n\nvar WithTasks = function WithTasks(WrappedComponent) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    applyCustomSort: false\n  };\n  loadTaskData();\n  return function (props) {\n    var _useState = useState(taskList),\n        _useState2 = _slicedToArray(_useState, 2),\n        tasks = _useState2[0],\n        setTasks = _useState2[1];\n\n    var _useState3 = useState(['dueDate', true]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        sortFieldA = _useState4[0],\n        setSortFieldA = _useState4[1];\n\n    var _useState5 = useState(['priority', true]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        sortFieldB = _useState6[0],\n        setSortFieldB = _useState6[1];\n\n    var _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        includeCompleted = _useState8[0],\n        setIncludeCompleted = _useState8[1];\n\n    var allTasks = tasks.map(function (task) {\n      return _objectSpread({}, task, {\n        dueDate: moment(task.dueDate),\n        assignedDate: moment(task.assignedDate)\n      });\n    });\n\n    if (!opts.applyCustomSort) {\n      allTasks = allTasks.sort(function (taskA, taskB) {\n        if (taskA['dueDate'] < taskB['dueDate']) return -1;\n        if (taskA['dueDate'] > taskB['dueDate']) return 1;\n        return 0;\n      }).sort(function (taskA, taskB) {\n        if (taskA['priority'] < taskB['priority']) return -1;\n        if (taskA['priority'] > taskB['priority']) return 1;\n        return 0;\n      });\n    } else {\n      allTasks = allTasks.sort(function (taskA, taskB) {\n        if (taskA[sortFieldA[0]] < taskB[sortFieldA[0]]) return sortFieldA[1] ? -1 : 1;\n        if (taskA[sortFieldA[0]] > taskB[sortFieldA[0]]) return sortFieldA[1] ? 1 : -1;\n        return 0;\n      }).sort(function (taskA, taskB) {\n        if (taskA[sortFieldB[0]] < taskB[sortFieldB[0]]) return sortFieldB[1] ? -1 : 1;\n        if (taskA[sortFieldB[0]] > taskB[sortFieldB[0]]) return sortFieldB[1] ? 1 : -1;\n        return 0;\n      });\n    }\n\n    var startOfToday = moment().startOf('day');\n    var endOfToday = moment().endOf('day');\n    var endOfWeek = moment().endOf('week');\n    var startOfWeek = moment().startOf('week');\n    var endOfmonth = moment().endOf('month');\n    var startOfmonth = moment().startOf('month');\n\n    var filterCompleted = function filterCompleted(t) {\n      return includeCompleted || !t.completed;\n    };\n\n    var completedTasks = allTasks.filter(function (t) {\n      return t.completed;\n    });\n    var todaysTasks = allTasks.filter(filterCompleted).filter(function (t) {\n      return t.dueDate >= startOfToday && t.dueDate <= endOfToday;\n    });\n    var weeksTasks = allTasks.filter(filterCompleted).filter(function (t) {\n      return t.dueDate <= endOfWeek && t.dueDate >= startOfWeek;\n    });\n    var monthsTasks = allTasks.filter(filterCompleted).filter(function (t) {\n      return t.dueDate <= endOfmonth && t.dueDate >= startOfmonth;\n    });\n    return React.createElement(WrappedComponent, Object.assign({\n      addTask: function addTask(task) {\n        taskList.push(generate(task));\n        saveState();\n        setTasks(_toConsumableArray(taskList));\n      },\n      updateTask: function updateTask(task) {\n        var foundIndex = taskList.findIndex(function (_ref) {\n          var id = _ref.id;\n          return id === task.id;\n        });\n\n        if (foundIndex) {\n          taskList[foundIndex] = _objectSpread({}, taskList[foundIndex], task);\n          saveState();\n          setTasks(_toConsumableArray(taskList));\n        }\n      },\n      allTasks: allTasks,\n      todaysTasks: todaysTasks,\n      weeksTasks: weeksTasks,\n      monthsTasks: monthsTasks,\n      completedTasks: completedTasks,\n      sortFieldA: sortFieldA,\n      setSortFieldA: setSortFieldA,\n      sortFieldB: sortFieldB,\n      setSortFieldB: setSortFieldB,\n      includeCompleted: includeCompleted,\n      setIncludeCompleted: setIncludeCompleted\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }));\n  };\n};\n\nexport default WithTasks;","map":{"version":3,"sources":["C:\\Users\\gmaks\\Desktop\\project\\hci-pagr.github.io\\src\\containers\\data\\WithTasks.js"],"names":["React","useState","moment","faker","random","randomDoctor","randomCategory","randomHospital","loaded","taskList","nextTaskId","localstorageKey","dataVersion","datesFrom","Date","setDate","getDate","datesTo","generate","task","id","name","arrayElement","category","hospital","description","words","dueDate","date","between","assignedDate","past","priority","completed","doctor","seed","i","push","saveState","localStorage","setItem","JSON","stringify","loadTaskData","getItem","parse","lsDataVersion","lsNextTaskId","lsTaskList","WithTasks","WrappedComponent","opts","applyCustomSort","props","tasks","setTasks","sortFieldA","setSortFieldA","sortFieldB","setSortFieldB","includeCompleted","setIncludeCompleted","allTasks","map","sort","taskA","taskB","startOfToday","startOf","endOfToday","endOf","endOfWeek","startOfWeek","endOfmonth","startOfmonth","filterCompleted","t","completedTasks","filter","todaysTasks","weeksTasks","monthsTasks","foundIndex","findIndex"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport moment from \"moment\";\r\nimport faker from \"faker\";\r\n\r\nimport {random as randomDoctor} from \"./WithDoctors\";\r\nimport {random as randomCategory} from \"./WithCategories\";\r\nimport {random as randomHospital} from \"./WithHospitals\";\r\n\r\nlet loaded = false;\r\nlet taskList = [];\r\nlet nextTaskId = 0;\r\n\r\nconst localstorageKey = 'task-data';\r\n\r\nconst dataVersion = 1;\r\n\r\nconst datesFrom = new Date();\r\ndatesFrom.setDate(datesFrom.getDate() - 7);\r\n\r\nconst datesTo = new Date();\r\ndatesTo.setDate(datesTo.getDate() + 30);\r\n\r\nconst generate = (task = {}) => {\r\n    nextTaskId += 1;\r\n    return {\r\n        id: nextTaskId,\r\n        name: faker.random.arrayElement([\r\n            'Tonsillectomy',\r\n            'Prostatectomy',\r\n            'Mastectomy',\r\n            'Inguinal hernia repairs',\r\n            'Free skin graft',\r\n            'Debridement of wound',\r\n            'Coronary artery bypass',\r\n            'Breast biopsy',\r\n            'Coronary angioplasty and stenting',\r\n            'Balloon valve surgery',\r\n            'Valve replacement',\r\n            'Pacemaker Fitting',\r\n            'Partial colectomy',\r\n            'Small-bowel resection',\r\n            'Gall bladder removal',\r\n            'Operation for peptic ulcer disease',\r\n            'Removal of abdominal adhesions',\r\n            'Appendectomy',\r\n            'Laparotomy',\r\n        ]),\r\n        category: randomCategory().name,\r\n        hospital: randomHospital().name,\r\n        description: faker.random.words(),\r\n        dueDate: faker.date.between(datesFrom, datesTo),\r\n        assignedDate: faker.date.past(),\r\n        priority: faker.random.arrayElement([1, 1, 2, 2, 2, 3, 3]),\r\n        completed: false,\r\n        doctor: randomDoctor().name,\r\n        ...task\r\n    };\r\n};\r\n\r\nconst seed = () => {\r\n    for (let i = 0; i < 50; i++) {\r\n        taskList.push(generate());\r\n    }\r\n};\r\n\r\nconst saveState = () => {\r\n    localStorage.setItem(localstorageKey, JSON.stringify({\r\n        dataVersion,\r\n        nextTaskId,\r\n        taskList\r\n    }))\r\n};\r\n\r\nconst loadTaskData = () => {\r\n    if (loaded) {\r\n        return;\r\n    }\r\n\r\n    if (localStorage.getItem(localstorageKey)) {\r\n        const {\r\n            dataVersion: lsDataVersion,\r\n            nextTaskId: lsNextTaskId,\r\n            taskList: lsTaskList\r\n        } = JSON.parse(localStorage.getItem(localstorageKey))\r\n\r\n        if (dataVersion === lsDataVersion) {\r\n            loaded = true;\r\n            nextTaskId = lsNextTaskId;\r\n            taskList = lsTaskList;\r\n            return;\r\n        }\r\n    }\r\n\r\n    seed();\r\n    saveState();\r\n    loaded = true;\r\n};\r\n\r\nconst WithTasks = (WrappedComponent, opts = {applyCustomSort: false}) => {\r\n    loadTaskData();\r\n\r\n    return (props) => {\r\n        const [tasks, setTasks] = useState(taskList)\r\n        const [sortFieldA, setSortFieldA] = useState(['dueDate', true])\r\n        const [sortFieldB, setSortFieldB] = useState(['priority', true])\r\n        const [includeCompleted, setIncludeCompleted] = useState(true)\r\n\r\n        let allTasks = tasks\r\n            .map((task) => ({\r\n                ...task,\r\n                dueDate: moment(task.dueDate),\r\n                assignedDate: moment(task.assignedDate)\r\n            }));\r\n\r\n        if (!opts.applyCustomSort) {\r\n            allTasks = allTasks\r\n                .sort(function (taskA, taskB) {\r\n                    if (taskA['dueDate'] < taskB['dueDate']) return (-1);\r\n                    if (taskA['dueDate'] > taskB['dueDate']) return (1);\r\n                    return 0;\r\n                })\r\n                .sort(function (taskA, taskB) {\r\n                    if (taskA['priority'] < taskB['priority']) return (-1);\r\n                    if (taskA['priority'] > taskB['priority']) return (1);\r\n                    return 0;\r\n                });\r\n        } else {\r\n            allTasks = allTasks\r\n                .sort(function (taskA, taskB) {\r\n                    if (taskA[sortFieldA[0]] < taskB[sortFieldA[0]]) return (sortFieldA[1] ? -1 : 1);\r\n                    if (taskA[sortFieldA[0]] > taskB[sortFieldA[0]]) return (sortFieldA[1] ? 1 : -1);\r\n                    return 0;\r\n                })\r\n                .sort(function (taskA, taskB) {\r\n                    if (taskA[sortFieldB[0]] < taskB[sortFieldB[0]]) return (sortFieldB[1] ? -1 : 1);\r\n                    if (taskA[sortFieldB[0]] > taskB[sortFieldB[0]]) return (sortFieldB[1] ? 1 : -1);\r\n                    return 0;\r\n                });\r\n        }\r\n\r\n        const startOfToday = moment().startOf('day');\r\n        const endOfToday = moment().endOf('day');\r\n        const endOfWeek = moment().endOf('week');\r\n        const startOfWeek = moment().startOf('week');\r\n        const endOfmonth = moment().endOf('month');\r\n        const startOfmonth = moment().startOf('month');\r\n\r\n        const filterCompleted = t => includeCompleted || !t.completed;\r\n\r\n        const completedTasks = allTasks.filter(t => t.completed);\r\n        const todaysTasks = allTasks.filter(filterCompleted).filter(t => t.dueDate >= startOfToday && t.dueDate <= endOfToday);\r\n        const weeksTasks = allTasks.filter(filterCompleted).filter(t => t.dueDate <= endOfWeek && t.dueDate >= startOfWeek);\r\n        const monthsTasks = allTasks.filter(filterCompleted).filter(t => t.dueDate <= endOfmonth && t.dueDate >= startOfmonth);\r\n\r\n        return (\r\n            <WrappedComponent\r\n                addTask={(task) => {\r\n                    taskList.push(generate(task));\r\n                    saveState();\r\n                    setTasks([...taskList]);\r\n                }}\r\n                updateTask={(task) => {\r\n                    const foundIndex = taskList.findIndex(({id}) => id === task.id)\r\n                    if (foundIndex) {\r\n                        taskList[foundIndex] = {\r\n                            ...taskList[foundIndex],\r\n                            ...task\r\n                        };\r\n\r\n                        saveState();\r\n                        setTasks([...taskList]);\r\n                    }\r\n                }}\r\n                allTasks={allTasks}\r\n                todaysTasks={todaysTasks}\r\n                weeksTasks={weeksTasks}\r\n                monthsTasks={monthsTasks}\r\n                completedTasks={completedTasks}\r\n                sortFieldA={sortFieldA}\r\n                setSortFieldA={setSortFieldA}\r\n                sortFieldB={sortFieldB}\r\n                setSortFieldB={setSortFieldB}\r\n                includeCompleted={includeCompleted}\r\n                setIncludeCompleted={setIncludeCompleted}\r\n                {...props}\r\n            />\r\n            );\r\n    }\r\n}\r\n\r\nexport default WithTasks;\r\n"]},"metadata":{},"sourceType":"module"}