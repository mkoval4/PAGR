{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport filter from 'lodash/filter';\nimport range from 'lodash/range';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport some from 'lodash/some';\nimport React from 'react';\nimport DayView from '../../views/DayView';\nimport { WEEKS_TO_DISPLAY } from '../../views/DayView';\nimport { SingleSelectionPicker } from '../BasePicker';\nimport { buildDays, getDisabledDays, getMarkedDays, getInitialDatePosition, isNextPageAvailable, isPrevPageAvailable } from './sharedFunctions';\nvar PAGE_WIDTH = 7;\nexport var DAYS_ON_PAGE = WEEKS_TO_DISPLAY * PAGE_WIDTH;\n\nvar DayPicker =\n/** @class */\nfunction (_super) {\n  __extends(DayPicker, _super);\n\n  function DayPicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.isNextPageAvailable = function () {\n      var _a = _this.props,\n          maxDate = _a.maxDate,\n          enable = _a.enable;\n\n      if (isArray(enable)) {\n        return some(enable, function (enabledDate) {\n          return enabledDate.isAfter(_this.state.date, 'month');\n        });\n      }\n\n      return isNextPageAvailable(_this.state.date, maxDate);\n    };\n\n    _this.isPrevPageAvailable = function () {\n      var _a = _this.props,\n          minDate = _a.minDate,\n          enable = _a.enable;\n\n      if (isArray(enable)) {\n        return some(enable, function (enabledDate) {\n          return enabledDate.isBefore(_this.state.date, 'month');\n        });\n      }\n\n      return isPrevPageAvailable(_this.state.date, minDate);\n    };\n\n    _this.handleChange = function (e, _a) {\n      var value = _a.value; // `value` is selected date(string) like '31' or '1'\n\n      var data = __assign({}, _this.props, {\n        value: {\n          year: _this.state.date.year(),\n          month: _this.state.date.month(),\n          date: parseInt(value, 10)\n        }\n      });\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(1, 'month');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(1, 'month');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.PAGE_WIDTH = PAGE_WIDTH;\n    return _this;\n  }\n\n  DayPicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        disable = _a.disable,\n        enable = _a.enable,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        marked = _a.marked,\n        markColor = _a.markColor,\n        localization = _a.localization,\n        rest = __rest(_a, [\"onChange\", \"value\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"disable\", \"enable\", \"minDate\", \"maxDate\", \"marked\", \"markColor\", \"localization\"]);\n\n    return React.createElement(DayView, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      hasNextPage: this.isNextPageAvailable(),\n      hasPrevPage: this.isPrevPageAvailable(),\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      onValueClick: this.handleChange,\n      onBlur: this.handleBlur,\n      inline: this.props.inline,\n      onMount: this.props.onCalendarViewMount,\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      onCellHover: this.onHoveredCellPositionChange,\n      currentHeadingValue: this.getCurrentDate(),\n      disabledItemIndexes: this.getDisabledPositions(),\n      activeItemIndex: this.getActiveCellPosition(),\n      markedItemIndexes: this.getMarkedPositions(),\n      markColor: markColor,\n      localization: localization\n    }));\n  };\n\n  DayPicker.prototype.getCurrentDate = function () {\n    /* Return currently selected year and month(string) to display in calendar header. */\n    return this.state.date.format('MMMM YYYY');\n  };\n\n  DayPicker.prototype.buildCalendarValues = function () {\n    /*\r\n      Return array of dates (strings) like ['31', '1', ...]\r\n      that used to populate calendar's page.\r\n    */\n    return buildDays(this.state.date, DAYS_ON_PAGE);\n  };\n\n  DayPicker.prototype.getSelectableCellPositions = function () {\n    var _this = this;\n\n    return filter(range(0, DAYS_ON_PAGE), function (d) {\n      return !includes(_this.getDisabledPositions(), d);\n    });\n  };\n\n  DayPicker.prototype.getInitialDatePosition = function () {\n    return getInitialDatePosition(this.state.date.date().toString(), this.buildCalendarValues(), this.getSelectableCellPositions());\n  };\n\n  DayPicker.prototype.getActiveCellPosition = function () {\n    /*\r\n      Return position of a date that should be displayed as active\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    if (this.props.value && this.props.value.isSame(this.state.date, 'month')) {\n      var disabledPositions_1 = this.getDisabledPositions();\n      var active = this.buildCalendarValues().map(function (day, i) {\n        return includes(disabledPositions_1, i) ? undefined : day;\n      }).indexOf(this.props.value.date().toString());\n\n      if (active >= 0) {\n        return active;\n      }\n    }\n  };\n\n  DayPicker.prototype.getDisabledPositions = function () {\n    /*\r\n      Return position numbers of dates that should be displayed as disabled\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var _a = this.props,\n        disable = _a.disable,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        enable = _a.enable;\n    return getDisabledDays(disable, maxDate, minDate, this.state.date, DAYS_ON_PAGE, enable);\n  };\n\n  DayPicker.prototype.getMarkedPositions = function () {\n    /*\r\n      Return position numbers of dates that should be displayed as marked\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var marked = this.props.marked;\n\n    if (marked) {\n      return getMarkedDays(marked, this.state.date, DAYS_ON_PAGE);\n    } else {\n      return [];\n    }\n  };\n\n  return DayPicker;\n}(SingleSelectionPicker);\n\nexport default DayPicker;","map":null,"metadata":{},"sourceType":"module"}