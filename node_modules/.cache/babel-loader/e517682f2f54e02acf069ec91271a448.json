{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport filter from 'lodash/filter';\nimport range from 'lodash/range';\nimport includes from 'lodash/includes';\nimport last from 'lodash/last';\nimport isNil from 'lodash/isNil';\nimport moment from 'moment';\nimport React from 'react';\nimport DatesRangeView from '../../views/DatesRangeView';\nimport { RangeSelectionPicker } from '../BasePicker';\nimport { DAYS_ON_PAGE } from './DayPicker';\nimport { buildDays, getDefaultEnabledDayPositions, getDisabledDays, getInitialDatePosition, isNextPageAvailable, isPrevPageAvailable, getMarkedDays } from './sharedFunctions';\nvar PAGE_WIDTH = 7;\n\nvar DatesRangePicker =\n/** @class */\nfunction (_super) {\n  __extends(DatesRangePicker, _super);\n\n  function DatesRangePicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleChange = function (e, _a) {\n      var itemPosition = _a.itemPosition; // call `onChange` with value: { start: moment, end: moment }\n\n      var _b = _this.props,\n          start = _b.start,\n          end = _b.end,\n          localization = _b.localization,\n          allowSameEndDate = _b.allowSameEndDate;\n\n      var data = __assign({}, _this.props, {\n        value: {}\n      });\n\n      var firstOnPage = parseInt(_this.buildCalendarValues()[0], 10);\n\n      if (isNil(start) && isNil(end)) {\n        data.value = {\n          start: buildMoment(_this.state.date, firstOnPage, itemPosition, localization)\n        };\n      } else if (!isNil(start) && isNil(end)) {\n        var selectedDate = buildMoment(_this.state.date, firstOnPage, itemPosition, localization);\n\n        if (selectedDate.isAfter(start, 'date') || allowSameEndDate && selectedDate.isSame(start, 'date')) {\n          data.value = {\n            start: start,\n            end: selectedDate\n          };\n        }\n      }\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(1, 'month');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(1, 'month');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.PAGE_WIDTH = PAGE_WIDTH;\n    return _this;\n  }\n\n  DatesRangePicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        dateFormat = _a.dateFormat,\n        start = _a.start,\n        end = _a.end,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        marked = _a.marked,\n        markColor = _a.markColor,\n        localization = _a.localization,\n        allowSameEndDate = _a.allowSameEndDate,\n        rest = __rest(_a, [\"onChange\", \"value\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"dateFormat\", \"start\", \"end\", \"minDate\", \"maxDate\", \"marked\", \"markColor\", \"localization\", \"allowSameEndDate\"]);\n\n    return React.createElement(DatesRangeView, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      onCellHover: this.onHoveredCellPositionChange,\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      onValueClick: this.handleChange,\n      inline: this.props.inline,\n      hasPrevPage: this.isPrevPageAvailable(),\n      hasNextPage: this.isNextPageAvailable(),\n      onBlur: this.handleBlur,\n      onMount: this.props.onCalendarViewMount,\n      currentHeadingValue: this.getCurrentDate(),\n      currentRangeHeadingValue: this.getSelectedRange(),\n      activeRange: this.getActiveCellsPositions(),\n      markedItemIndexes: this.getMarkedPositions(),\n      markColor: markColor,\n      disabledItemIndexes: this.getDisabledPositions(),\n      localization: localization\n    }));\n  };\n\n  DatesRangePicker.prototype.getCurrentDate = function () {\n    /* Return currently selected year and month(string) to display in calendar header. */\n    return this.state.date.format('MMMM YYYY');\n  };\n\n  DatesRangePicker.prototype.getMarkedPositions = function () {\n    /*\r\n      Return position numbers of dates that should be displayed as marked\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var marked = this.props.marked;\n\n    if (marked) {\n      return getMarkedDays(marked, this.state.date, DAYS_ON_PAGE);\n    } else {\n      return [];\n    }\n  };\n\n  DatesRangePicker.prototype.buildCalendarValues = function () {\n    /*\r\n      Return array of dates (strings) like ['31', '1', ...]\r\n      that used to populate calendar's page.\r\n    */\n    return buildDays(this.state.date, DAYS_ON_PAGE);\n  };\n\n  DatesRangePicker.prototype.getSelectableCellPositions = function () {\n    var _this = this;\n\n    return filter(range(0, DAYS_ON_PAGE), function (d) {\n      return !includes(_this.getDisabledPositions(), d);\n    });\n  };\n\n  DatesRangePicker.prototype.getInitialDatePosition = function () {\n    return getInitialDatePosition(this.state.date.date().toString(), this.buildCalendarValues(), this.getSelectableCellPositions());\n  }; // TODO: too complicated method\n\n\n  DatesRangePicker.prototype.getActiveCellsPositions = function () {\n    /*\r\n      Return starting and ending positions of dates range that should be displayed as active\r\n      { start: number, end: number }\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var date = this.state.date;\n    var _a = this.props,\n        start = _a.start,\n        end = _a.end;\n    var allDays = this.buildCalendarValues();\n    var fromCurrentMonthDayPositions = getDefaultEnabledDayPositions(allDays, date);\n    var fromPrevMonthDates = getDatesFromPrevMonth(date, allDays, fromCurrentMonthDayPositions[0]);\n    var fromNextMonthDates = getDatesFromNextMonth(date, allDays, last(fromCurrentMonthDayPositions) + 1);\n    var fromCurrentMonthDates = range(1, this.state.date.daysInMonth() + 1);\n    var prevMonth = date.clone();\n    prevMonth.subtract(1, 'month');\n    var nextMonth = date.clone();\n    nextMonth.add(1, 'month');\n\n    if (start && end) {\n      var startPosition = getDatePosition(prevMonth, this.state.date, nextMonth, start, fromPrevMonthDates, fromCurrentMonthDates, fromNextMonthDates);\n      var endPosition = getDatePosition(prevMonth, this.state.date, nextMonth, end, fromPrevMonthDates, fromCurrentMonthDates, fromNextMonthDates);\n\n      if (startPosition && endPosition) {\n        return {\n          start: startPosition,\n          end: endPosition\n        };\n      }\n\n      if (startPosition) {\n        return {\n          start: startPosition,\n          end: DAYS_ON_PAGE - 1\n        };\n      }\n\n      if (endPosition) {\n        return {\n          start: 0,\n          end: endPosition\n        };\n      }\n\n      if (this.state.date.isBetween(start, end)) {\n        return {\n          start: 0,\n          end: DAYS_ON_PAGE - 1\n        };\n      }\n    }\n\n    if (start) {\n      var startPosition = getDatePosition(prevMonth, this.state.date, nextMonth, start, fromPrevMonthDates, fromCurrentMonthDates, fromNextMonthDates);\n      return {\n        start: startPosition,\n        end: undefined\n      };\n    }\n\n    return {\n      start: undefined,\n      end: undefined\n    };\n  };\n\n  DatesRangePicker.prototype.getDisabledPositions = function () {\n    /*\r\n      Return position numbers of dates that should be displayed as disabled\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var _a = this.props,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate;\n    return getDisabledDays(undefined, maxDate, minDate, this.state.date, DAYS_ON_PAGE, undefined);\n  };\n\n  DatesRangePicker.prototype.isNextPageAvailable = function () {\n    return isNextPageAvailable(this.state.date, this.props.maxDate);\n  };\n\n  DatesRangePicker.prototype.isPrevPageAvailable = function () {\n    return isPrevPageAvailable(this.state.date, this.props.minDate);\n  };\n\n  DatesRangePicker.prototype.getSelectedRange = function () {\n    /* Return currently selected dates range(string) to display in calendar header. */\n    var _a = this.props,\n        start = _a.start,\n        end = _a.end,\n        dateFormat = _a.dateFormat;\n    return (start ? start.format(dateFormat) : '- - -') + \" - \" + (end ? end.format(dateFormat) : '- - -');\n  };\n\n  return DatesRangePicker;\n}(RangeSelectionPicker);\n/** Return position of a given date on the page.\r\n *\r\n * Page consists of some dates from previous month, dates from current month\r\n * and some dates from next month.\r\n *\r\n * Return undefined if date that is under test is out of page.\r\n */\n\n\nfunction getDatePosition(prevMonth, currentMonth, nextMonth, date, fromPrevMonthDates, fromCurrentMonthDates, fromNextMonthDates) {\n  if (date.isSame(prevMonth, 'month')) {\n    var position = fromPrevMonthDates.indexOf(date.date());\n\n    if (position >= 0) {\n      return position;\n    }\n  }\n\n  if (date.isSame(currentMonth, 'month')) {\n    return fromCurrentMonthDates.indexOf(date.date()) + fromPrevMonthDates.length;\n  }\n\n  if (date.isSame(nextMonth, 'month')) {\n    var position = fromNextMonthDates.indexOf(date.date());\n\n    if (position >= 0) {\n      return position + fromPrevMonthDates.length + fromCurrentMonthDates.length;\n    }\n  }\n}\n\nfunction getDatesFromPrevMonth(date, allDays, currentMonthStartPosition) {\n  if (currentMonthStartPosition === 0) {\n    return [];\n  }\n\n  return allDays.slice(0, currentMonthStartPosition).map(function (d) {\n    return parseInt(d, 10);\n  });\n}\n\nfunction getDatesFromNextMonth(date, allDays, nextMonthStartPosition) {\n  if (nextMonthStartPosition === allDays.length) {\n    return [];\n  }\n\n  return allDays.slice(nextMonthStartPosition, allDays.length).map(function (d) {\n    return parseInt(d, 10);\n  });\n}\n/** Build moment based on current page and date position on that page. */\n\n\nfunction buildMoment(pageReferenceDate, firstOnPage, dateToBuildPosition, localization) {\n  var result;\n\n  if (firstOnPage === 1\n  /* page starts from first day in month */\n  ) {\n      var dateOptions = {\n        year: pageReferenceDate.year(),\n        month: pageReferenceDate.month(),\n        date: firstOnPage\n      };\n      result = localization ? moment(dateOptions).locale(localization) : moment(dateOptions);\n    } else {\n    /* page starts from day in previous month */\n    var dateOptions = {\n      year: pageReferenceDate.month() ? pageReferenceDate.year() : pageReferenceDate.year() - 1,\n      month: (pageReferenceDate.month() + 11) % 12,\n      date: firstOnPage\n    };\n    result = localization ? moment(dateOptions).locale(localization) : moment(dateOptions);\n  }\n\n  result.add(dateToBuildPosition, 'day');\n  return result;\n}\n\nexport default DatesRangePicker;","map":null,"metadata":{},"sourceType":"module"}